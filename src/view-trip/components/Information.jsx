import { useEffect, useState } from "react";
import { FaShareAlt } from "react-icons/fa";
import { Button } from "@/components/ui/button";
import { GetPlaceDetails, PHOTO_REF_URL } from "../../service/GlobalApi.js";
import { IoMdDownload } from "react-icons/io";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";

export default function Information({ trip }) {
  const [photoUrl, setPhotoUrl] = useState();

  useEffect(() => {
    if (trip) {
      getPlacePhoto();
    }
  }, [trip]);

  const getPlacePhoto = async () => {
    if (!trip?.userSelection?.location?.label) {
      console.error("No location label found in trip data");
      return;
    }

    const data = {
      textQuery: trip?.userSelection?.location?.label,
    };

    try {
      const placeDetails = await GetPlaceDetails(data);
      const PhotoUrl = PHOTO_REF_URL.replace(
        "{NAME}",
        placeDetails.places[0].photos[3].name
      );
      setPhotoUrl(PhotoUrl);
    } catch (error) {
      console.error("Error fetching place photo:", error);
    }
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: "Check this out!",
          text: "I have created this trip using AI with Tripzee.",
          url: window.location.href,
        });
      } catch (error) {
        console.error("Error sharing content:", error);
      }
    } else {
      alert("Share not supported on this browser");
    }
  };

  const downloadExcel = () => {
    const wb = XLSX.utils.book_new();
    const wsData = [
      ["Trip Plan"],
      [],
      ["Location", trip?.userSelection?.location?.label],
      ["No. of Days", trip?.userSelection?.noOfDays],
      ["No. of People", trip?.userSelection?.traveler],
      ["Budget", trip?.userSelection?.budget],
      [],
      ["Hotels"],
      ["Name", "Address", "Price", "Rating"],
      ...(trip?.tripData?.hotels?.map((hotel) => [
        hotel?.name,
        hotel?.address,
        hotel?.price,
        hotel?.rating,
      ]) || []),
      [],
      ["Places to Visit"],
      ["Day", "Places", "Time", "Ticket Pricing", "Rating", "Details"],
      ...(trip?.tripData?.itinerary?.flatMap((day) =>
        day?.plan?.map((place) => [
          day?.day,
          place?.location,
          place?.time,
          place?.ticketPricing,
          place?.rating,
          place?.details,
        ])
      ) || []),
    ];

    const ws = XLSX.utils.aoa_to_sheet(wsData);
    XLSX.utils.book_append_sheet(wb, ws, "Trip Plan");

    const wbout = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    saveAs(
      new Blob([wbout], { type: "application/octet-stream" }),
      `${trip?.userSelection?.location?.label || "trip_plan"}.xlsx`
    );
  };

  return (
    <div className="px-4 rounded-xl py-5 md:px-8 md:py-6 dark:bg-gray-800">
      <div className="relative h-[240px] md:h-[340px] w-full overflow-hidden rounded-xl">
        <img
          src={photoUrl}
          className="absolute inset-0 h-full w-full object-cover"
          alt="picture"
        />
      </div>
      <div className="flex flex-col md:flex-row items-center justify-between mt-5">
        <div className="flex flex-col gap-6">
          <h2 className="font-bold text-2xl md:text-3xl dark:text-white">
            {trip?.userSelection?.location?.label}
          </h2>
          <p className="text-sm text-gray-600 dark:text-gray-300">
            *Note: This trip itinerary is generated by AI. We recommend
            double-checking the details and making any necessary adjustments to
            ensure a smooth and enjoyable experience.
          </p>
          <div className="flex gap-2 md:gap-3 flex-wrap">
            <span className="p-1 px-3 bg-gray-200 dark:bg-gray-700 rounded-full text-gray-500 dark:text-gray-300 text-sm md:text-md">
              ðŸ“… {trip?.userSelection?.noOfDays} Day(s)
            </span>
            <span className="p-1 flex items-center px-3 bg-gray-200 dark:bg-gray-700 rounded-full text-gray-500 dark:text-gray-300 text-sm md:text-md">
              ðŸ’µ {trip?.userSelection?.budget} Budget
            </span>
            <span className="p-1 px-3 bg-gray-200 dark:bg-gray-700 rounded-full text-gray-500 dark:text-gray-300 text-sm md:text-md">
              ðŸš™ No of travellers: {trip?.userSelection?.traveler}
            </span>
          </div>
        </div>
        <div className="flex items-center gap-4">
          <Button
            className="mt-5 md:mt-0"
            onClick={() => {
              return handleShare();
            }}
          >
            <FaShareAlt className="text-lg" />
          </Button>
          <Button
            className="mt-5 md:mt-0"
            onClick={() => {
              return downloadExcel();
            }}
          >
            <IoMdDownload className="text-lg" />
          </Button>
        </div>
      </div>
    </div>
  );
}
